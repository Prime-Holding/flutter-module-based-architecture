plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {

    // ----- BEGIN flavorDimensions (autogenerated by flutter_flavorizr) -----
    flavorDimensions += "environment"

    productFlavors {
        development {
            dimension "environment"
            applicationId "com.example.melostest"
            versionNameSuffix "-development"
            applicationIdSuffix ".development"
            resValue "string", "app_name", "Melostest Dev"
            resValue "string", "facebook_app_id", "insert_facebook_app_id"
            resValue "string", "facebook_client_token", "insert_client_token"
        }
        sit {
            dimension "environment"
            applicationId "com.example.melostest"
            versionNameSuffix "-sit"
            applicationIdSuffix ".sit"
            resValue "string", "app_name", "Melostest SIT"
            resValue "string", "facebook_app_id", "insert_facebook_app_id"
            resValue "string", "facebook_client_token", "insert_client_token"
        }
        uat {
            dimension "environment"
            applicationId "com.example.melostest"
            versionNameSuffix "-uat"
            applicationIdSuffix ".uat"
            resValue "string", "app_name", "Melostest UAT"
            resValue "string", "facebook_app_id", "insert_facebook_app_id"
            resValue "string", "facebook_client_token", "insert_client_token"
        }
        production {
            dimension "environment"
            applicationId "com.example.melostest"
            resValue "string", "app_name", "Melostest"
            resValue "string", "facebook_app_id", "insert_facebook_app_id"
            resValue "string", "facebook_client_token", "insert_client_token"
        }
    }

    // ----- END flavorDimensions (autogenerated by flutter_flavorizr) -----
        
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file('key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    
    namespace = "com.example.melostest"
    compileSdk = 34
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
      execution "ANDROIDX_TEST_ORCHESTRATOR"
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.melostest"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 22
        targetSdk = 34
        versionCode = flutter.versionCode
        versionName = flutter.versionName    
        testInstrumentationRunner "pl.leancode.patrol.PatrolJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    signingConfigs {
        if (System.getenv("ANDROID_KEYSTORE_PATH")) {
            release {
                storeFile file(System.getenv("ANDROID_KEYSTORE_PATH"))
                keyAlias System.getenv("ANDROID_KEYSTORE_ALIAS")
                keyPassword System.getenv("ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            }
        } else {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    
}

flutter {
    source = "../.."
}
